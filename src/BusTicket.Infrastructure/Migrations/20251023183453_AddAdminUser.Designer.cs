// <auto-generated />
using System;
using BusTicket.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BusTicket.Infrastructure.Migrations
{
    [DbContext(typeof(BusTicketDbContext))]
    [Migration("20251023183453_AddAdminUser")]
    partial class AddAdminUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("busticket")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BusTicket.Domain.Entities.AdminUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_date");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("password_hash");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refresh_token_expiry_time");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("p_k_admin_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_admin_users_email");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_admin_users_is_active");

                    b.HasIndex("RefreshToken")
                        .HasDatabaseName("ix_admin_users_refresh_token");

                    b.ToTable("admin_users", "busticket");
                });

            modelBuilder.Entity("BusTicket.Domain.Entities.Bus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("bus_name");

                    b.Property<string>("BusNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("bus_number");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("integer")
                        .HasColumnName("total_seats");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("p_k_buses");

                    b.HasIndex("BusNumber")
                        .IsUnique()
                        .HasDatabaseName("i_x_buses_bus_number");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("i_x_buses_company_id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("i_x_buses_is_active");

                    b.ToTable("buses", "busticket");
                });

            modelBuilder.Entity("BusTicket.Domain.Entities.BusSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<TimeSpan>("ArrivalTime")
                        .HasColumnType("interval")
                        .HasColumnName("arrival_time");

                    b.Property<Guid>("BusId")
                        .HasColumnType("uuid")
                        .HasColumnName("bus_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<TimeSpan>("DepartureTime")
                        .HasColumnType("interval")
                        .HasColumnName("departure_time");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime>("JourneyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("journey_date");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("route_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("p_k_bus_schedules");

                    b.HasIndex("BusId")
                        .HasDatabaseName("i_x_bus_schedules_bus_id");

                    b.HasIndex("DepartureTime")
                        .HasDatabaseName("i_x_bus_schedules_departure_time");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("i_x_bus_schedules_is_active");

                    b.HasIndex("JourneyDate")
                        .HasDatabaseName("i_x_bus_schedules_journey_date");

                    b.HasIndex("RouteId")
                        .HasDatabaseName("i_x_bus_schedules_route_id");

                    b.HasIndex("RouteId", "JourneyDate")
                        .HasDatabaseName("i_x_bus_schedules_route_id_journey_date");

                    b.ToTable("bus_schedules", "busticket");
                });

            modelBuilder.Entity("BusTicket.Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("contact_number");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("p_k_companies");

                    b.HasIndex("Email")
                        .HasDatabaseName("i_x_companies_email");

                    b.HasIndex("Name")
                        .HasDatabaseName("i_x_companies_name");

                    b.ToTable("companies", "busticket");
                });

            modelBuilder.Entity("BusTicket.Domain.Entities.Passenger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int?>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("gender");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("p_k_passengers");

                    b.HasIndex("Email")
                        .HasDatabaseName("i_x_passengers_email");

                    b.ToTable("passengers", "busticket");
                });

            modelBuilder.Entity("BusTicket.Domain.Entities.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<decimal>("DistanceInKm")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("distance_in_km");

                    b.Property<TimeSpan>("EstimatedDuration")
                        .HasColumnType("interval")
                        .HasColumnName("estimated_duration");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("p_k_routes");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("i_x_routes_is_active");

                    b.ToTable("routes", "busticket");
                });

            modelBuilder.Entity("BusTicket.Domain.Entities.Seat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BusScheduleId")
                        .HasColumnType("uuid")
                        .HasColumnName("bus_schedule_id");

                    b.Property<int>("Column")
                        .HasColumnType("integer")
                        .HasColumnName("column");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<int>("Row")
                        .HasColumnType("integer")
                        .HasColumnName("row");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("seat_number");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<Guid?>("TicketId")
                        .HasColumnType("uuid")
                        .HasColumnName("ticket_id");

                    b.Property<Guid?>("TicketId1")
                        .HasColumnType("uuid")
                        .HasColumnName("ticket_id1");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("p_k_seats");

                    b.HasIndex("BusScheduleId")
                        .HasDatabaseName("i_x_seats_bus_schedule_id");

                    b.HasIndex("Status")
                        .HasDatabaseName("i_x_seats_status");

                    b.HasIndex("TicketId")
                        .HasDatabaseName("i_x_seats_ticket_id");

                    b.HasIndex("TicketId1")
                        .HasDatabaseName("i_x_seats_ticket_id1");

                    b.HasIndex("SeatNumber", "Status")
                        .HasDatabaseName("i_x_seats_seat_number_status");

                    b.ToTable("seats", "busticket");
                });

            modelBuilder.Entity("BusTicket.Domain.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("booking_date");

                    b.Property<Guid>("BusScheduleId")
                        .HasColumnType("uuid")
                        .HasColumnName("bus_schedule_id");

                    b.Property<DateTime?>("CancellationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancellation_date");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("text")
                        .HasColumnName("cancellation_reason");

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("confirmation_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsCancelled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_cancelled");

                    b.Property<bool>("IsConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_confirmed");

                    b.Property<Guid>("PassengerId")
                        .HasColumnType("uuid")
                        .HasColumnName("passenger_id");

                    b.Property<Guid>("SeatId")
                        .HasColumnType("uuid")
                        .HasColumnName("seat_id");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ticket_number");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("p_k_tickets");

                    b.HasIndex("BookingDate")
                        .HasDatabaseName("i_x_tickets_booking_date");

                    b.HasIndex("BusScheduleId")
                        .HasDatabaseName("i_x_tickets_bus_schedule_id");

                    b.HasIndex("IsCancelled")
                        .HasDatabaseName("i_x_tickets_is_cancelled");

                    b.HasIndex("IsConfirmed")
                        .HasDatabaseName("i_x_tickets_is_confirmed");

                    b.HasIndex("PassengerId")
                        .HasDatabaseName("i_x_tickets_passenger_id");

                    b.HasIndex("SeatId")
                        .IsUnique()
                        .HasDatabaseName("i_x_tickets_seat_id");

                    b.HasIndex("TicketNumber")
                        .IsUnique()
                        .HasDatabaseName("i_x_tickets_ticket_number");

                    b.ToTable("tickets", "busticket");
                });

            modelBuilder.Entity("BusTicket.Domain.Entities.Bus", b =>
                {
                    b.HasOne("BusTicket.Domain.Entities.Company", "Company")
                        .WithMany("Buses")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_buses_companies_company_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BusTicket.Domain.Entities.BusSchedule", b =>
                {
                    b.HasOne("BusTicket.Domain.Entities.Bus", "Bus")
                        .WithMany("BusSchedules")
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_bus_schedules_buses_bus_id");

                    b.HasOne("BusTicket.Domain.Entities.Route", "Route")
                        .WithMany("BusSchedules")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_bus_schedules_routes_route_id");

                    b.OwnsOne("BusTicket.Domain.ValueObjects.Address", "BoardingPoint", b1 =>
                        {
                            b1.Property<Guid>("BusScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Area")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("boarding_area");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("boarding_city");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("boarding_postal_code");

                            b1.Property<string>("Street")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("boarding_street");

                            b1.HasKey("BusScheduleId");

                            b1.ToTable("bus_schedules", "busticket");

                            b1.WithOwner()
                                .HasForeignKey("BusScheduleId");
                        });

                    b.OwnsOne("BusTicket.Domain.ValueObjects.Address", "DroppingPoint", b1 =>
                        {
                            b1.Property<Guid>("BusScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Area")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("dropping_area");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("dropping_city");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("dropping_postal_code");

                            b1.Property<string>("Street")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("dropping_street");

                            b1.HasKey("BusScheduleId");

                            b1.ToTable("bus_schedules", "busticket");

                            b1.WithOwner()
                                .HasForeignKey("BusScheduleId");
                        });

                    b.OwnsOne("BusTicket.Domain.ValueObjects.Money", "Fare", b1 =>
                        {
                            b1.Property<Guid>("BusScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("fare_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("fare_currency");

                            b1.HasKey("BusScheduleId");

                            b1.ToTable("bus_schedules", "busticket");

                            b1.WithOwner()
                                .HasForeignKey("BusScheduleId");
                        });

                    b.Navigation("BoardingPoint")
                        .IsRequired();

                    b.Navigation("Bus");

                    b.Navigation("DroppingPoint")
                        .IsRequired();

                    b.Navigation("Fare")
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("BusTicket.Domain.Entities.Passenger", b =>
                {
                    b.OwnsOne("BusTicket.Domain.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("PassengerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("phone_number");

                            b1.HasKey("PassengerId");

                            b1.ToTable("passengers", "busticket");

                            b1.WithOwner()
                                .HasForeignKey("PassengerId");
                        });

                    b.Navigation("PhoneNumber")
                        .IsRequired();
                });

            modelBuilder.Entity("BusTicket.Domain.Entities.Route", b =>
                {
                    b.OwnsOne("BusTicket.Domain.ValueObjects.Address", "FromLocation", b1 =>
                        {
                            b1.Property<Guid>("RouteId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Area")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("from_area");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("from_city");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("from_postal_code");

                            b1.Property<string>("Street")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("from_street");

                            b1.HasKey("RouteId");

                            b1.ToTable("routes", "busticket");

                            b1.WithOwner()
                                .HasForeignKey("RouteId");
                        });

                    b.OwnsOne("BusTicket.Domain.ValueObjects.Address", "ToLocation", b1 =>
                        {
                            b1.Property<Guid>("RouteId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Area")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("to_area");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("to_city");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("to_postal_code");

                            b1.Property<string>("Street")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("to_street");

                            b1.HasKey("RouteId");

                            b1.ToTable("routes", "busticket");

                            b1.WithOwner()
                                .HasForeignKey("RouteId");
                        });

                    b.Navigation("FromLocation")
                        .IsRequired();

                    b.Navigation("ToLocation")
                        .IsRequired();
                });

            modelBuilder.Entity("BusTicket.Domain.Entities.Seat", b =>
                {
                    b.HasOne("BusTicket.Domain.Entities.BusSchedule", "BusSchedule")
                        .WithMany("Seats")
                        .HasForeignKey("BusScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_seats_bus_schedules_bus_schedule_id");

                    b.HasOne("BusTicket.Domain.Entities.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId1")
                        .HasConstraintName("f_k_seats_tickets_ticket_id1");

                    b.Navigation("BusSchedule");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("BusTicket.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("BusTicket.Domain.Entities.BusSchedule", "BusSchedule")
                        .WithMany("Tickets")
                        .HasForeignKey("BusScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_tickets_bus_schedules_bus_schedule_id");

                    b.HasOne("BusTicket.Domain.Entities.Passenger", "Passenger")
                        .WithMany("Tickets")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_tickets_passengers_passenger_id");

                    b.HasOne("BusTicket.Domain.Entities.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_tickets_seats_seat_id");

                    b.OwnsOne("BusTicket.Domain.ValueObjects.Address", "BoardingPoint", b1 =>
                        {
                            b1.Property<Guid>("TicketId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Area")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("boarding_area");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("boarding_city");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("boarding_postal_code");

                            b1.Property<string>("Street")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("boarding_street");

                            b1.HasKey("TicketId");

                            b1.ToTable("tickets", "busticket");

                            b1.WithOwner()
                                .HasForeignKey("TicketId");
                        });

                    b.OwnsOne("BusTicket.Domain.ValueObjects.Address", "DroppingPoint", b1 =>
                        {
                            b1.Property<Guid>("TicketId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Area")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("dropping_area");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("dropping_city");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("dropping_postal_code");

                            b1.Property<string>("Street")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("dropping_street");

                            b1.HasKey("TicketId");

                            b1.ToTable("tickets", "busticket");

                            b1.WithOwner()
                                .HasForeignKey("TicketId");
                        });

                    b.OwnsOne("BusTicket.Domain.ValueObjects.Money", "Fare", b1 =>
                        {
                            b1.Property<Guid>("TicketId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("fare_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("fare_currency");

                            b1.HasKey("TicketId");

                            b1.ToTable("tickets", "busticket");

                            b1.WithOwner()
                                .HasForeignKey("TicketId");
                        });

                    b.Navigation("BoardingPoint")
                        .IsRequired();

                    b.Navigation("BusSchedule");

                    b.Navigation("DroppingPoint")
                        .IsRequired();

                    b.Navigation("Fare")
                        .IsRequired();

                    b.Navigation("Passenger");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("BusTicket.Domain.Entities.Bus", b =>
                {
                    b.Navigation("BusSchedules");
                });

            modelBuilder.Entity("BusTicket.Domain.Entities.BusSchedule", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("BusTicket.Domain.Entities.Company", b =>
                {
                    b.Navigation("Buses");
                });

            modelBuilder.Entity("BusTicket.Domain.Entities.Passenger", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("BusTicket.Domain.Entities.Route", b =>
                {
                    b.Navigation("BusSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
